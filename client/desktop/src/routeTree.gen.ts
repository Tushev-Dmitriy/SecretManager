/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './renderer/routes/__root'
import { Route as LoginRouteImport } from './renderer/routes/login'
import { Route as BaseLayoutRouteImport } from './renderer/routes/_baseLayout'
import { Route as BaseLayoutIndexRouteImport } from './renderer/routes/_baseLayout/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const BaseLayoutRoute = BaseLayoutRouteImport.update({
  id: '/_baseLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const BaseLayoutIndexRoute = BaseLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BaseLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/': typeof BaseLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof BaseLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_baseLayout': typeof BaseLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_baseLayout/': typeof BaseLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id: '__root__' | '/_baseLayout' | '/login' | '/_baseLayout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BaseLayoutRoute: typeof BaseLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_baseLayout': {
      id: '/_baseLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BaseLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_baseLayout/': {
      id: '/_baseLayout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof BaseLayoutIndexRouteImport
      parentRoute: typeof BaseLayoutRoute
    }
  }
}

interface BaseLayoutRouteChildren {
  BaseLayoutIndexRoute: typeof BaseLayoutIndexRoute
}

const BaseLayoutRouteChildren: BaseLayoutRouteChildren = {
  BaseLayoutIndexRoute: BaseLayoutIndexRoute,
}

const BaseLayoutRouteWithChildren = BaseLayoutRoute._addFileChildren(
  BaseLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  BaseLayoutRoute: BaseLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
